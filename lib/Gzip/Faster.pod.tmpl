[% start_year = 2014 %]
[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]
[% END %]
[% MACRO since(version) BLOCK -%]
This was added to the module in version [% version %].
[%- END %]
=encoding UTF-8

=head1 NAME

Gzip::Faster - simple and fast gzip and gunzip

=head1 SYNOPSIS

[% INCLUDE "synopsis.pl" | xtidy %]

=head1 VERSION

This documents version [% info.version %] of Gzip::Faster
corresponding to git commit L<[% commit.commit %]|[% info.repo
%]/commit/[% commit.commit %]> made on [% commit.date %].

=head1 DESCRIPTION

This module compresses to and decompresses from the gzip format.

The module offers two basic functions, L</gzip> and L</gunzip>, which
convert scalars to and from gzip format, and three convenience
functions: L</gzip_file> reads a file then compresses it;
L</gunzip_file> reads a file then uncompresses it; and L</gzip_to_file>
compresses a scalar and writes it to a file.

=head1 FUNCTIONS

=head2 gzip

    my $zipped = gzip ($plain);

This compresses C<$plain> into the gzip format. The return value is
the compressed version of C<$plain>. 

=head2 gunzip

    my $plain = gunzip ($zipped);

This uncompresses C<$zipped> and returns the result of the
uncompression. It returns the undefined value if C<$zipped> is the
undefined value or an empty string. Otherwise, it throws a fatal error
if C<$zipped> is not in the gzip format.

=head2 gzip_file

    my $zipped = gzip_file ('file');

This reads the contents of F<file> into memory and then runs L</gzip>
on the file's contents. The return value and the possible errors are
the same as L</gzip>, plus this may also throw an error if C<open>
fails.

=head2 gunzip_file

    my $plain = gunzip_file ('file.gz');

This reads the contents of F<file.gz> into memory and then runs
L</gunzip> on the file's contents. The return value and the possible
errors are the same as L</gunzip>, plus this may also throw an error
if C<open> fails.

=head2 gzip_to_file

    gzip_to_file ($plain, 'file.gz');

This compresses C<$plain> in memory using L</gzip> and writes the
compressed content to 'file.gz'. There is no return value. The errors
are the same as L</gzip>, plus this may also throw an error if C<open>
fails. As of this version, it does not write any gzip header
information to F<file.gz>.

=head2 deflate

    my $deflated = deflate ($plain);

This is similar to L</gzip> except that it doesn't write the gzip
header information. The output can be inflated either with L</inflate>
or with L</gunzip>.

There is 
an example of using L</deflate> to write a PNG in the module
in F<t/png.t>.

[% since('0.16') %]

=head2 inflate

    my $inflated = inflate ($deflated);

Inflate the output of L</deflate>. Although the code is slightly
different, for all practical purposes this is identical to L</gunzip>,
and it's included only for completeness.

The following example demonstrates using C<inflate> with a PNG image.

[% example('inflate') %]

[% since('0.16') %]

=head2 deflate_raw

This is similar to L</deflate> except that it doesn't write the check
sum value in the data at all. The output must be inflated with
L</inflate_raw>.

[% since('0.16') %]

=head2 inflate_raw

This inflates data output by L</deflate_raw>. Although the code is
basically similar to L</inflate> and L</gunzip>, it won't work on the
output of L</gzip> and L</deflate>.

[% since('0.16') %]

=head1 METHODS

=head2 new

    my $gf = Gzip::Faster->new ();

Defaults to gzip compression.

[% since('0.16') %]

=head2 zip

    my $zipped = $gf->zip ($plain);

Compress C<$plain>. The type of compression can be set with L</gzip>
and L</raw>.

[% since('0.16') %]

=head2 unzip

    my $plain = $gf->unzip ($zipped);

Uncompress C<$zipped>. The type of uncompression can be set with
L</gzip> and L</raw>.

[% since('0.16') %]

=head2 copy_perl_flags

    $gf->copy_perl_flags (1);

Copy the Perl flags like the utf8 flag into the header of the gzipped
data.

This feature of the module was restored in version 0.16.

=head2 file_name

    my $filename = $gf->file_name ();
    $gf->file_name ('this.gz');

Get or set the file name. This only applies to the gzip format, since
the deflate format has no header to store a name into. When you set a
file name, then use L</zip>, the file name is subsequently deleted
from the object, so it needs to be set each time L</zip> is called.

The following example demonstrates storing and then retrieving the
name:

[% example('file-name') %]

The module currently has a hard-coded limit of 1024 bytes as the
maximum length of file name it can read back.

[% since('0.16') %]

=head2 gzip_format

    $gf->gzip_format (1);

Switch between gzip and deflate formats. The default is gzip format.

[% since('0.16') %]

=head2 raw

    $gf->raw (1);

Switch between raw inflate and inflate formats. Switching this on
automatically switches off L</gzip_format>, since these are not
compatible.

The sequence

    $gf->gzip_format (1);
    $gf->raw (1);
    $gf->raw (0);

ends up with C<$gf> in the non-raw inflate format.

[% since('0.16') %]

=head2 level

    $gf->level (9);

Set the compression level, from 0 (no compression) to 9 (best
compression). Values outside the levels cause a warning and the level
to be set to the nearest valid value, for example a value of 100
causes the level to be set to 9.

[% since('0.16') %]

=head1 PERFORMANCE

This section compares the performance of Gzip::Faster with
L<IO::Compress::Gzip> / L<IO::Uncompress::Gunzip> and
L<Compress::Raw::Zlib>. 

=head2 Short text

This section compares the performance of Gzip::Faster and other
modules on a short piece of English text. These results are produced
by the file F<bench/benchmarks.pl> in the distribution.

According to these results, Gzip::Faster is about five times faster to
load, seven times faster to compress, and twenty-five times faster to
uncompress than L<IO::Compress::Gzip> and
L<IO::Uncompress::Gunzip>. Round trips are about ten times faster with
Gzip::Faster.

Compared to L<Compress::Raw::Zlib>, load times are about one and a
half times faster, round trips are about three times faster,
compression is about two and a half times faster, and decompression is
about six times faster.

The versions used in this test are as follows:

[% short.versions | indent (4) %]

The size after compression is as follows:

[% short.size | indent (4) %]

Here is a comparison of load times:

[% short.load | indent (4) %]

Here is a comparison of a round-trip:

[% short.round | indent (4) %]

Here is a comparison of gzip (compression) only:

[% short.gzip | indent (4) %]

Here is a comparison of gunzip (decompression) only:

[% short.gunzip | indent (4) %]

The test file is in F<bench/benchmark.pl> in the distribution.

=head2 Long text

This section compares the compression on a 2.2 megabyte file of
Chinese text, which is the Project Gutenberg version of Journey to the
West, L<http://www.gutenberg.org/files/23962/23962-0.txt>, with the
header and footer text removed.

The versions used in this test are as above.

The sizes are as follows:

[% long.size | indent (4) %]

Note that the size of the file compressed with the command-line gzip,
with the default compression, is identical to the size with
Gzip::Faster::gzip, except for the 12 bytes in the file version used
to store the file name:

    $ gzip --keep chinese.txt
    $ ls -l chinese.txt.gz 
    -rw-r--r--  1 ben  ben  995835 Oct 20 18:52 chinese.txt.gz

Here is a comparison of a round-trip:

[% long.round | indent (4) %]

Here is a comparison of gzip (compression) only:

[% long.gzip | indent (4) %]

Here is a comparison of gunzip (decompression) only:

[% long.gunzip | indent (4) %]

For longer files, Gzip::Faster is not much faster and the underlying
library's speed is the main factor.

=head1 BUGS

There is no way to select the level of compression. The level of
compression offered by this module is the zlib default one, which is
what you get if you run the command-line program gzip on a file
without the options like C<--best> or C<--fast>.

The module doesn't check whether the input of L</gzip> is already
gzipped, and it doesn't check whether the compression was
effective. That is, it doesn't check whether the output of L</gzip> is
actually smaller than the input.

=head2 Browser bugs and Gzip::Faster

Some web browsers have bugs which may affect users of this module.

Using L</copy_perl_flags> with utf8-encoded text trips a browser bug
in the Firefox web browser where it produces a content encoding error
message.

Using deflate rather than gzip compression on world-wide web pages on
the internet, trips browser bugs in some versions of Internet
Explorer.

=head1 EXPORTS

The module exports L</gzip>, L</gunzip>, L</gzip_file>,
L</gunzip_file>, and L</gzip_to_file> by default. You can switch this
blanket exporting off with

    use Gzip::Faster ();

or

    use Gzip::Faster 'gunzip';

whereby you only get C<gunzip> and not the other functions
exported. The functions L</inflate>, L</deflate>, L</inflate_raw> and
L</deflate_raw> are exported on demand only. You can export all the
functions from the module using

    use Gzip::Faster ':all';

=head1 DIAGNOSTICS

All errors are fatal.

=over

=item Data input to inflate is not in libz format

The data given to L</gunzip>, L</inflate>, or L</inflate_raw> was not
in the expected format.

=item Error opening '$file': $!

This may be produced by L</gunzip_file>, L</gzip_file>, or L</gzip_to_file>.

=item Error closing '$file': $!

This may be produced by L</gunzip_file>, L</gzip_file>, or L</gzip_to_file>.

=back

There are a number of other diagnostics but these are meant to detect
bugs. A complete list of the other can be obtained by running the
C<parse-diagnostics> script which comes with L<Parse::Diagnostics> on
the files F<gzip-faster-perl.c> and F<lib/Gzip/Faster.pm> in the
distribution.

=head1 INSTALLATION

Installation follows the standard Perl methods. If you do not know
what the standard Perl module install methods are, detailed
instructions can be found in the file F<README> in the
distribution. The following are some extra notes for people who get
stuck.

Gzip::Faster requires the compression library C<zlib> (also called
C<libz>) to be installed. The following message printed during C<perl
Makefile.PL>:

    You don't seem to have zlib available on your system.

or

    Warning (mostly harmless): No library found for -lz

or the following message at run-time:

    undefined symbol: inflate

indicate that Gzip::Faster was unable to link to C<libz>.

=head2 Ubuntu Linux

On Ubuntu Linux, you may need to install C<zlib1g-dev> using the
following command:

    sudo apt-get install zlib1g-dev

=head2 Windows

Unfortunately at this time the module doesn't seem to install on
ActiveState Perl. You can check the current status at
L<http://code.activestate.com/ppm/Gzip-Faster/>. However, the module
seems to install without problems on Strawberry Perl, so if you cannot
install via ActiveState, you could try that instead.

=head1 ACKNOWLEDGEMENTS

zgrim reported an important bug related to zlib.

Aristotle Pagaltzis contributed the benchmarking code for
L<Compress::Raw::Zlib>.

The tests in F<t/png.t> use material taken from
L<Image::PNG::Write::BW> by Andrea Nall (<ANALL>).

=head1 SEE ALSO

=over

=item gzip

Even within Perl, sometimes it's a lot easier to use the command line
utility C<gzip> as in

    system ("gzip file");

or C<`gzip file`> than it is to try to figure out how to use some
module or another.

=item mod_deflate and mod_gzip

These are Apache web server modules which compress web outputs on the
fly.

=item L<PerlIO::gzip>

This is a Perl extension to provide a PerlIO layer to
gzip/gunzip. That means you can just add C<:gzip> when you open a file
to read or write compressed files:

    open my $in, "<:gzip", 'file.gz'

    open my $out, ">:gzip", 'file.gz'

and you never have to deal with the gzip format.

=item L<IO::Zlib>

=item L<Compress::Zlib>

=item L<Compress::Raw::Zlib>

=item L<CGI::Compress::Gzip>

=item L<IO::Compress::Gzip> and L<IO::Uncompress::Gunzip>

=back

=head1 HISTORY

This module started as an experimental benchmark against
L<IO::Compress::Gzip> when profiling revealed that some web programs
were spending the majority of their time in
L<IO::Compress::Gzip>. Because I also had some web programs in C,
which use the raw zlib itself, I was aware that zlib itself was very
fast, and I was surprised by the amount of time the Perl code was
taking. I wrote this module to test IO::Compress::Gzip against a
simplistic C wrapper. I released the module to CPAN because the
results were very striking. 

The code's ancestor is the example program C<zpipe> supplied with
zlib. See L<http://zlib.net/zpipe.c>. Gzip::Faster is little more than
C<zpipe> reading to and and writing from Perl scalars. 

Version 0.16 added L</deflate> and related functions.

[% INCLUDE "author" %]
