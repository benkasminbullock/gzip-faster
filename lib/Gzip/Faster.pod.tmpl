[% start_year = 2014 %]
=encoding UTF-8

=head1 NAME

Gzip::Faster - simple and fast gzip and gunzip

=head1 SYNOPSIS

[% INCLUDE "synopsis.pl" | xtidy %]

=head1 DESCRIPTION

This module compresses to and decompresses from the gzip format.

The module offers two basic functions, L</gzip> and L</gunzip>, which
convert scalars to and from gzip format, and three convenience
functions: L</gzip_file> reads a file then compresses it;
L</gunzip_file> reads a file then uncompresses it; and L</gzip_to_file>
compresses a scalar and writes it to a file.

=head1 FUNCTIONS

=head2 gzip

    my $zipped = gzip ($stuff);

This compresses C<$stuff> into the gzip format. The return value is
the compressed version of C<$stuff>. 

=head2 gunzip

    my $stuff = gunzip ($zipped);

This uncompresses C<$zipped> and returns the result of the
uncompression. It returns the undefined value if C<$zipped> is the
undefined value or an empty string. Otherwise, it throws a fatal error
if C<$zipped> is not in the gzip format.

=head2 gzip_file

    my $zipped = gzip_file ('file');

This reads the contents of F<file> into memory and then runs L</gzip>
on the file's contents. The return value and the possible errors are
the same as L</gzip>, plus this may also throw an error if C<open>
fails.

=head2 gunzip_file

    my $stuff = gunzip_file ('file.gz');

This reads the contents of F<file.gz> into memory and then runs
L</gunzip> on the file's contents. The return value and the possible
errors are the same as L</gunzip>, plus this may also throw an error
if C<open> fails.

=head2 gzip_to_file

    gzip_to_file ($plain, 'file.gz');

This compresses C<$plain> in memory using L</gzip> and writes the
compressed content to 'file.gz'. There is no return value. The errors
are the same as L</gzip>, plus this may also throw an error if C<open>
fails. As of this version, it does not write any gzip header
information to F<file.gz>.

=head1 PERFORMANCE

This section compares the performance of Gzip::Faster with
L<IO::Compress::Gzip> / L<IO::Uncompress::Gunzip> and
L<Compress::Raw::Zlib>. 

=head2 Short text

The compression and decompression parts test
the performance of the modules on a short piece of English text.

According to my results, Gzip::Faster is about five times faster to
load, seven times faster to compress, and twenty-five times faster to
uncompress than the IO::Uncompress modules. Round trips are about ten
times faster with Gzip::Faster.

Compared to the L<Compress::Raw::Zlib> modules, load times are about
one and a half times faster, round trips are about three times faster,
compression is about two and a half times faster, and decompression is
about six times faster.

The versions used in this test are as follows:

[% short.versions | indent (4) %]

The size after compression is as follows:

[% short.size | indent (4) %]

Here is a comparison of load times:

[% short.load | indent (4) %]

Here is a comparison of a round-trip:

[% short.round | indent (4) %]

Here is a comparison of gzip (compression) only:

[% short.gzip | indent (4) %]

Here is a comparison of gunzip (decompression) only:

[% short.gunzip | indent (4) %]

The test file is in "bench/benchmark.pl" in the distribution.

=head2 Long text

This section compares the compression on a 2.2 megabyte file of
Chinese text, which is the Project Gutenberg version of Journey to the
West, L<http://www.gutenberg.org/files/23962/23962-0.txt>, with the
header and footer text removed.

The versions used in this test are as above.

The sizes are as follows:

[% long.size | indent (4) %]

Note that the size of the file compressed with the command-line gzip,
with the default compression, is identical to the size with
Gzip::Faster::gzip, except for the 12 bytes in the file version used
to store the file name:

    $ gzip --keep chinese.txt
    $ ls -l chinese.txt.gz 
    -rw-r--r--  1 ben  ben  995835 Oct 20 18:52 chinese.txt.gz

Here is a comparison of a round-trip:

[% long.round | indent (4) %]

Here is a comparison of gzip (compression) only:

[% long.gzip | indent (4) %]

Here is a comparison of gunzip (decompression) only:

[% long.gunzip | indent (4) %]

For longer files, Gzip::Faster is not much faster and the underlying
library's speed is the main factor.

=head1 BUGS

The module source code includes disabled functionality to round-trip
Perl flags. I applied this to preserving Perl's "utf8" flag. However,
the mechanism I used trips a browser bug in the Firefox web browser
where it produces a content encoding error message. Thus this
functionality is disabled. Please refer to the file
F<gzip-faster-perl.c> in the distribution, the relevant parts are
commented out with a macro C<COPY_PERL>.

The module doesn't check whether the input of L</gzip> is already
gzipped, and it doesn't check whether the compression was
effective. That is, it doesn't check whether the output of L</gzip> is
actually smaller than the input.

=head1 INSTALLATION

Installation follows the standard Perl methods. If you do not know
what the standard Perl module install methods are, detailed
instructions can be found in the file F<README> in the
distribution. The following are some extra notes for people who get
stuck.

Gzip::Faster requires the compression library C<zlib> (also called
C<libz>) to be installed. The following message printed during perl
Makefile.PL:

    Warning (mostly harmless): No library found for -lz

or the following message at run-time:

    undefined symbol: inflate

indicate that Gzip::Faster was unable to link to C<libz>.

=head2 Ubuntu Linux

On Ubuntu Linux, you may need to install C<zlib1g-dev> using the
following command:

    sudo apt-get install zlib1g-dev

=head1 ACKNOWLEDGEMENTS

zgrim reported an important bug related to zlib.

Aristotle Pagaltzis contributed the benchmarking code for
L<Compress::Raw::Zlib>.

=head1 SEE ALSO

=over

=item gzip

Even within Perl, sometimes it's a lot easier to use the command line
utility C<gzip> as in

    system ("gzip file");

or C<`gzip file`> than it is to try to figure out how to use some
module or another.

=item mod_deflate and mod_gzip

These are Apache web server modules which compress web outputs on the
fly.

=back

=head1 HISTORY

This module started as a way to get better-performing compression for
web pages created on the fly.


[% INCLUDE "author" %]
